---
import { Icon } from "astro-icon/components";
import { getI18ChatQuestions, getI18NCV } from "@/i18n";

const { currentLocale = "en" } = Astro;
const questions = getI18ChatQuestions({ currentLocale });
const cv = JSON.stringify(getI18NCV({ currentLocale }));
---

<!-- Chat Container -->
<div class="chat-container" id="chat-container">
  <!-- Chat Header -->
  <div class="mb-4 flex items-center">
    <div class="ml-3">
      <p class="text-xl font-medium">NickEsColR BOT</p>
      <span class="text-gray-500" id="status"
        >{currentLocale == "es" ? "Cargando" : "Loading"} 0%</span
      >
    </div>
  </div>

  <!-- Chat Messages -->
  <ul class="message-container" id="message-container"></ul>

  <ul class="mt-6 flex gap-1" id="questions">
    {
      questions.map((question) => (
        <li data-question={question.complete}>
          <button class="focus-visible:ring-ring border-input inline-flex h-7 items-center justify-center whitespace-nowrap rounded-md border bg-skin-button-accent px-3 text-sm font-medium text-skin-muted transition-colors hover:opacity-80 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50">
            {question.min}
          </button>
        </li>
      ))
    }
  </ul>
  <!-- Chat Input -->
  <form class="mt-1.5 flex items-center" id="chat-form">
    <input
      id="chat-input"
      type="text"
      placeholder={currentLocale === "es"
        ? "Escribe un mensaje..."
        : "Type a message..."}
      class="flex-1 rounded-full bg-blue-100 px-3 py-2 focus:outline-none dark:bg-neutral-800"
    />
    <button
      id="chat-button"
      class="ml-3 cursor-pointer rounded-full bg-skin-button-accent px-4 py-2 hover:opacity-80"
      disabled
    >
      <Icon name="mdi:send" width={20} height={20} />
    </button>
  </form>
</div>

<template id="message-template">
  <li>
    <p class="text-sm"></p>
  </li>
</template>

<style>
  .chat-container {
    @apply flex flex-col rounded-lg border border-skin-muted bg-skin-fill p-4 shadow-md print:hidden;
    height: 50dvh;
  }

  .message-container {
    @apply flex w-full flex-1 flex-col space-y-4 overflow-y-auto;
    scrollbar-width: none;
  }

  .message-bot {
    @apply ml-3 w-fit items-start rounded-2xl rounded-tl-none bg-skin-hue p-3;
  }

  .message-user {
    @apply w-fit self-end rounded-2xl rounded-br-none bg-skin-muted p-3;
  }

  button[disabled] {
    @apply cursor-not-allowed bg-neutral-600;
  }
</style>

<script>
  const questions = document.querySelectorAll(
    "#questions li",
  ) as NodeListOf<HTMLLIElement>;
  const input = document.querySelector("#chat-input") as HTMLInputElement;

  questions.forEach((question) => {
    question.addEventListener("click", () => {
      const value = question.dataset.question ?? "";
      input.value = value;
      input.focus();
    });
  });
</script>

<script>
  import { isOpen } from "@/store/chat.store";

  isOpen.subscribe((open) => {
    const chat = document.querySelector("#chat-container") as HTMLDivElement;
    if (open) {
      chat.style.display = "flex";
    } else {
      chat.style.display = "none";
    }
  });
</script>

<script
  is:inline
  type="module"
  define:vars={{ currentLocale, cv }}
  src="/chat.worker.js"
>
  import { CreateWebWorkerMLCEngine } from "https://cdn.jsdelivr.net/npm/@mlc-ai/web-llm@0.2.78/+esm";

  const button = document.querySelector("#chat-button");
  const loading = document.querySelector("#status");
  const form = document.querySelector("#chat-form");
  const input = document.querySelector("#chat-input");
  const template = document.querySelector("#message-template");
  const messagesContainer = document.querySelector("#message-container");

  const prompt =
    "Answer only based on the following information:" +
    cv +
    ". If any question cannot be answered based on the information given, please respond with 'I don't have enough information to answer the question.'. Answer in first person, with a friendly and professional tone. Answer in plane text format";

  let messages = [
    {
      role: "system",
      content: prompt,
    },
  ];
  let end = false;

  const SELECTED_MODEL = "Llama-3.2-3B-Instruct-q4f16_1-MLC";

  const engine = await CreateWebWorkerMLCEngine(
    new Worker("./chat.worker.js", { type: "module" }),
    SELECTED_MODEL,
    {
      initProgressCallback: (info) => {
        if (info.progress === 1 && !end) {
          end = true;
          loading.style.display = "none";
          button.removeAttribute("disabled");
          addMessage(
            currentLocale === "es"
              ? "Hola, ¿Qué te gustaría saber de mí?"
              : "Hello there! What do you want to know about me?",
            "bot",
          );
        } else {
          loading.textContent = `${currentLocale === "es" ? "Cargando" : "Loading"} ${Math.round(
            info.progress * 100,
          )}%`;
        }
      },
    },
  );

  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    const messageText = input.value.trim();

    if (messageText !== "") {
      input.value = "";
    }

    addMessage(messageText, "user");
    button.setAttribute("disabled", "");

    const userMessage = {
      role: "user",
      content: messageText,
    };

    messages.push(userMessage);

    const chunks = await engine.chat.completions.create({
      messages,
      stream: true,
    });

    let reply = "";

    const botMessage = addMessage("", "bot");

    for await (const chunk of chunks) {
      const choice = chunk.choices[0];
      const content = choice?.delta?.content ?? "";
      reply += content;
      botMessage.textContent = reply;
      scroll();
    }

    button.removeAttribute("disabled");
    messages.push({
      role: "assistant",
      content: reply,
    });
    scroll();
  });

  function scroll() {
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function addMessage(text, sender) {
    const clonedTemplate = template.content.cloneNode(true);
    const newMessage = clonedTemplate.querySelector("li");
    const textContainer = newMessage.querySelector("p");

    textContainer.textContent = text;
    textContainer.classList.add(
      sender === "bot" ? "text-skin-base" : "text-skin-muted",
    );
    newMessage.classList.add(sender === "bot" ? "message-bot" : "message-user");

    messagesContainer.appendChild(newMessage);

    scroll();
    return textContainer;
  }
</script>
